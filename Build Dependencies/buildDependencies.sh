#!/bin/bash

export PLATFORM_BUILD_SDK_PREFIX="macosx"
export PLATFORM_BUILD_SDK_VERSION="macosx10.10"
export PLATFORM_BUILD_ARCHITECTURES="x86_64"

export LIBRARY_OPENSSL_VERSION="1.0.2"
export LIBRARY_GPG_ERROR_VERSION="1.18"
export LIBRARY_GCRYPT_VERSION="1.6.3"
export LIBRARY_OTR_VERSION="4.1.0"

export LIBRARIES_TO_BUILD=()

LIBRARIES_TO_BUILD+=("openssl")
LIBRARIES_TO_BUILD+=("libgcrypt")
LIBRARIES_TO_BUILD+=("libgpg-error")
LIBRARIES_TO_BUILD+=("libotr")

export ROOT_DIRECTORY="/private/tmp/com.codeux.frameworks.encryptionKit/"

export SHARED_BUILD_RESULT_BINARY_LOCATION="${ROOT_DIRECTORY}Library-Build-Results/bin/"
export SHARED_BUILD_RESULT_INCLUDE_LOCATION="${ROOT_DIRECTORY}Library-Build-Results/includes/"
export SHARED_BUILD_RESULT_LIBRARY_LOCATION="${ROOT_DIRECTORY}Library-Build-Results/lib/"

export WORKING_DIRECTORY="${ROOT_DIRECTORY}Library-Build-Source/"

# export PLATFORM_BUILD_SDK_ROOT_LOCATION=$(xcrun -sdk ${PLATFORM_BUILD_SDK_VERSION} --show-sdk-path)
# export PLATFORM_BUILD_SDK_CLANG_LOCATION=$(xcrun -sdk ${PLATFORM_BUILD_SDK_VERSION} -find clang)

function deleteOldAndCreateDirectory {
	if [ -d "$1" ]; then
		rm -rf "$1"
	fi

	mkdir -p "$1"
}

deleteOldAndCreateDirectory "${SHARED_BUILD_RESULT_INCLUDE_LOCATION}"
deleteOldAndCreateDirectory "${SHARED_BUILD_RESULT_LIBRARY_LOCATION}"
deleteOldAndCreateDirectory "${SHARED_BUILD_RESULT_BINARY_LOCATION}"

BUILT_ARCHITECTURES=()

for BUILD_ARCHITECTURE in ${PLATFORM_BUILD_ARCHITECTURES}
do
	for LIBRARY_TO_BUILD in ${LIBRARIES_TO_BUILD[@]}
	do
		export LIBRARY_WORKING_DIRECTORY_LOCATION="${WORKING_DIRECTORY}${LIBRARY_TO_BUILD}-${BUILD_ARCHITECTURE}/"

		export LIBRARY_BUILD_RESULT_BINARY_LOCATION="${SHARED_BUILD_RESULT_BINARY_LOCATION}${LIBRARY_TO_BUILD}-${BUILD_ARCHITECTURE}/"
		export LIBRARY_BUILD_RESULT_INCLUDE_LOCAITON="${SHARED_BUILD_RESULT_INCLUDE_LOCATION}${LIBRARY_TO_BUILD}"
		export LIBRARY_BUILD_RESULT_LIBRARY_LOCATION="${SHARED_BUILD_RESULT_LIBRARY_LOCATION}${LIBRARY_TO_BUILD}-${BUILD_ARCHITECTURE}.a"

		deleteOldAndCreateDirectory "${LIBRARY_WORKING_DIRECTORY_LOCATION}"
		deleteOldAndCreateDirectory "${LIBRARY_BUILD_RESULT_BINARY_LOCATION}"

		export LIBRARY_ARCHITECTURE_TO_BUILD="${BUILD_ARCHITECTURE}"

		./Libraries/build_${LIBRARY_TO_BUILD}.sh
	done

	BUILT_ARCHITECTURES+=("${BUILD_ARCHITECTURE}")
done

NUMBER_OF_BUILT_ARCHITECTURES=${#BUILT_ARCHITECTURES[@]}

for BUILT_LIBRARY in ${LIBRARIES_TO_BUILD[@]}
do
	BUILT_LIBRARY_LOCATIONS=( "${BUILT_ARCHITECTURES[@]/#/${BUILT_LIBRARY}-}" )
	BUILT_LIBRARY_LOCATIONS=( "${BUILT_LIBRARY_LOCATIONS[@]/#/${SHARED_BUILD_RESULT_LIBRARY_LOCATION}}" )
	BUILT_LIBRARY_LOCATIONS=( "${BUILT_LIBRARY_LOCATIONS[@]/%/.a}" )

	if [ "${NUMBER_OF_BUILT_ARCHITECTURES}" == "1" ]; then
		for BUILT_LIBRARY_LOCATION in ${BUILT_LIBRARY_LOCATIONS[@]}
		do
			cp "${BUILT_LIBRARY_LOCATION}" "${SHARED_BUILD_RESULT_LIBRARY_LOCATION}${BUILT_LIBRARY}.a"
		done
	else
		xcrun -sdk ${PLATFORM_BUILD_SDK_PREFIX} lipo ${BUILT_LIBRARY_LOCATIONS[@]} -create -output "${SHARED_BUILD_RESULT_LIBRARY_LOCATION}${BUILT_LIBRARY}.a"
	fi
done

# rm -rf "${WORKING_DIRECTORY}"
